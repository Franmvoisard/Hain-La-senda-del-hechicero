//Definiciones
 #define Vol_plus 2064;  //[PODESIRNOS]
 #define Vol_min 2065;   //[TEGUSTANLOSPIRATAS]
 #define Ch_plus 2080;   //[PODESVERNOS]
 #define Ch_min 2081;    //[QUERESPELEAR]  
 #define Uno 2049;       //[TENESALMA] 
 #define Dos 2050;       //[SOMOSAMIGOS] 
 #define Tres 2051;      //[CORAZONLENTO]
 #define Cuatro 2052;    //[CORAZONRAPIDO] 
 #define Cinco 2053;     //[VARITAENOJO] 
 #define Seis 2054;      //[VIENTO] 
 #define Siete 2055;     //[PAJAROS]
 #define Ocho 2056;      //[POSESION]
 #define Nueve 2057;     //[GIROSCOPIO]
 #define motorbase 5;    //Micromotor vibrador en el pin 5 de Arduino.
 #define motormedio 6;   //Motor en el pin 6 del Arduino
 #define INTERRUPT_PIN 3;//Pin de interrupción (INT de Giroscopio como D2 de arduino
 #define LedRojo 6;      //Pin de Led Rojo
 #define LedVerde 9;     //Pin de Led verde
 #define LedAzul 10;     //Pin de Led Azul

//Librerías
#include "I2Cdev.h"
#include <IRremote.h>
#include <SoftwareSerial.h>
#include <DFPlayer_Mini_Mp3.h>
#include "MPU6050.h"
#include "Wire.h"

unsigned long int _ahora = 0;
unsigned long int _ultimo = 0;

const byte Motorbase = 5;
const byte Motormedio = 6;

int _vibracionActualMB = 0;
int _vibracionActualMM = 0;
int _ultimaVibracionMB = 0;
int _ultimaVibracionMM = 0;
bool _vibrando = false;
unsigned long int _tiempotrans= 0;
int _indice = 0;


      int IRpin = 3;  //Sensor infrarrojo en el pin 3
      IRrecv irrecv(IRpin);  
      decode_results results;



SoftwareSerial mySerial(4, 7); //Iniciar la transmisión de datos para el MP3 RX, TX

void setup(){
irrecv.enableIRIn();
pinMode(Motorbase, LOW);
pinMode(Motormedio, LOW);

}

void loop() {
      ActualizarMotores();
      }
      
void ActualizarMotores(){
           if (_vibrando==true){
            analogWrite(Motorbase,_vibracionActualMB);
            analogWrite(Motormedio,_vibracionActualMM);
      }
}

void receiveIR() {
  // Aca el llamado a la funcion que lee el IR, te guardas el valor en cmd para saber para donde switchear
  if (irrecv.decode(&results)){
  int cmd = results.value;
  Serial.print(cmd);
  switch(cmd){
    case 2064:
      ActivarMotor("5",0,255,300,1);
      break;
    case 2065:
      ActivarMotor("6",0,255,3000,5);
      break;
    case 2080:
      ActivarMotor("5",0,255,300,3);
      break;
    
  }
  irrecv.resume();
}
}

void ActivarMotor(int motor,int inicio, int fin, long duracion, int veces){ // Definir los parámetros básicos que afectaran al sistema compuesto por los motores
   _ultimo = millis();
   _vibrando = true;    //Levantar un flag de activación
   _ultimaVibracionMB = _vibracionActualMB;
   _ultimaVibracionMM = _vibracionActualMM;
   _tiempotrans = duracion; //Pasar el valor de la variable a global
   _ahora = millis();   //Setear _ahora equivalente a la duración en ms actuales desde que el procesador se inició
   _indice = floor(duracion /(_ahora - _ultimo)); // Obtener la fracción de la transición  //5000 /(10000 - 0)
   if ((_ahora - _ultimo) < duracion){
   if (motor == 5) {
            _vibracionActualMB = ((fin - _ultimaVibracionMB) / _indice) + _ultimaVibracionMB;
      }
      else {
            _vibracionActualMM = ((fin - _ultimaVibracionMM)/ _indice) + _ultimaVibracionMM;
      }
   }
}
